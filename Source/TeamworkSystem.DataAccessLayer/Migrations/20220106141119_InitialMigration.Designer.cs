// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamworkSystem.DataAccessLayer;

#nullable disable

namespace TeamworkSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(TeamworkSystemContext))]
    [Migration("20220106141119_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamsMembers", (string)null);

                    b.HasData(
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 1
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 2
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 3
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 4
                        },
                        new
                        {
                            MembersId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            TeamsId = 5
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 6
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 7
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 8
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 9
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 9
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 9
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Just a simple blog from small team",
                            TeamId = 9,
                            Title = "Blog",
                            Type = "Website"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Punctuality")
                        .HasColumnType("int");

                    b.Property<int>("Responsibility")
                        .HasColumnType("int");

                    b.Property<int>("Skills")
                        .HasColumnType("int");

                    b.Property<int>("Social")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("FromId", "ToId")
                        .HasName("AK_Ratings_FromId_ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Just a great person",
                            FromId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Punctuality = 4,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 5,
                            ToId = "61dfb9e3-1c27-424a-9963-9586ca110220"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("ntext");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Young and ambitious",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Amigos",
                            Specialization = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Heatwave",
                            Specialization = "OblEnergo"
                        },
                        new
                        {
                            Id = 3,
                            About = "Lazy guys",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Lazy Guys",
                            Specialization = "Design"
                        },
                        new
                        {
                            Id = 4,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Champions"
                        },
                        new
                        {
                            Id = 5,
                            LeaderId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            Name = "Legends"
                        },
                        new
                        {
                            Id = 6,
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Shakedown"
                        },
                        new
                        {
                            Id = 7,
                            About = "We are the warriors",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Warriors"
                        },
                        new
                        {
                            Id = 8,
                            About = "We are the defenders",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Defenders",
                            Specialization = "Tests"
                        },
                        new
                        {
                            Id = 9,
                            About = "We are writing bugs, fear us",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Thunder",
                            Specialization = "Writing bugs"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2022, 1, 6, 13, 57, 3, 0, DateTimeKind.Unspecified),
                            Description = "There's unknown bug. Just fix it.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "Medium",
                            ProjectId = 1,
                            Status = "Backlog",
                            Title = "Fix bug",
                            Type = "Epic"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f44736ce-d7d2-41f5-89f7-95919ba4b4fa",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ostap",
                            LastName = "Nice",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHIJxNS71yM2C19K8pJktzIg+gOfmz3ySn59bRPhmSrkabIMpXGGzKjZjhnEjFKqSA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "c58ae9db-4ab1-41d9-acbf-dbd162586983",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e50a9022-d52a-4380-b83d-f0a475fbf14a",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esmaralda",
                            LastName = "Voigt",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2BIy+jkeBhvgGn5KGCTBlCMZLv1a/3No9TNsIy4cK+hZX72njK6pgL1GgqPM0PKw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "b1b368ca-830b-4d51-9088-cca805dbae10",
                            Specialization = "Frontend",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "a36b02e1-81a9-47f4-89b6-d33c4f40ed5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "337bed17-84eb-40fd-b054-8143c3f2a395",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sophia",
                            LastName = "Beringer",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/UmfH8XG+WTNv1ObFBISr3QPkLEIioSGoSE624sdtPr/n0R2CF0QHAxj3nJ20tVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd9d63cf-b341-4a41-9bea-eee95a727210",
                            Specialization = "Fullstack",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bf32f13-7700-49e6-86db-2a5061d23dac",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marlyn",
                            LastName = "Hendry",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLBS07wW/31unmQo+9CzPpddy9CAQ9MoJMctGizdmQGkV5wbs8AfOqY4junLa3EHw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Artist",
                            SecurityStamp = "f7cca86c-9d2a-416e-b80c-2c8433bb799d",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "ae557ffc-2906-4913-bd26-40aa98a55570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f9a4766-ce0c-4212-83e3-b5aa91766e41",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vlasi",
                            LastName = "Arterberry",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@GMAIL.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAR2JdvRPd1tVc+laO+tHhsGmRUodkuSHxiLnsMAu0UEiPSWpOMNOgelabUN5IY8mg==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "2b429c9a-051e-4853-b1b9-109e9ea1c800",
                            Specialization = "Interier",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "e5ca09a8-d3c6-4114-99a0-6b2f86ff1df2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a6db53c-46af-4c60-a447-033fd6a1f1c5",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chasity",
                            LastName = "Ilbert",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAECR6b8CpecXVogmitbfkvTOt2PWxVi3+f8ITWxYl8mJ3w4KAcPVV2hHnEZ3oMW1T1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4bdbefd-5d8f-4ccd-aa24-5930aa75aa68",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "bc0c5522-0a02-4f23-bb6a-319529716a94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5c49d1a-19e7-45fe-8dd9-9f9554aa5e45",
                            Email = "user7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seraphina",
                            LastName = "Salmon",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@GMAIL.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEFUDlk3bKxR8CoowzB76pDuzWh5oSL0xvqSGV4iNfPzeUkWLW33K7gDPtSGkkPb5sg==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "486d413e-645c-4682-80ef-ff00375c60b1",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "7484e532-dc8e-4005-8b67-15ad8a421a37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc22b52f-696d-43a2-aadc-5cd3127af882",
                            Email = "user8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chas",
                            LastName = "Hope",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@GMAIL.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEDMlNkhUX9Tv8m1WoKR/a5ih0hIAz/YvPiN4O33OyOtaFmYU4AkLWH5rDE1KbqgfBQ==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "66c2ff61-d8df-44d0-b0bf-20da42d4dda8",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94cb97ce-bd4e-4a74-912b-fb0562cf8d98",
                            Email = "user9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nadezhda",
                            LastName = "Haynes",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEMujOiZ+xyXQzQ0BQaFPacbSywrVpM/kUyOVkLpqjnyqpNL5iPFSh4pQuXALTAzDzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c33daa4-c288-436c-9f48-d5316bdf21f7",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5197c13-324a-4de3-814f-fbd0466b4a3c",
                            Email = "user10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sonny",
                            LastName = "Gibb",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpXFqORoIAZzf4ecLwpafHOApLBaIaX+GKlPCrl5uUpwZVtE9ihjJv0JFsq9/ObLw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Tester",
                            SecurityStamp = "3c9bec94-dd50-4ee4-8f5e-be1e84ea8c86",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8e49c32-6b6a-4e06-ac96-f683fa8a0df5",
                            Email = "user11@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eric",
                            LastName = "Lincoln",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@GMAIL.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEMYbmSdr5+9v1sDNj+0f+c1+DmI0ugPnbtFMx3ONkWszAGHfFhZdWO4XZvvDjemq1w==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "370697bb-d75e-42da-9560-b182cb28aaa3",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendForUsersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SecondId");

                    b.Property<string>("FriendsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstId");

                    b.HasKey("FriendForUsersId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "From")
                        .WithMany("MyRatings")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_FromId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "To")
                        .WithMany("RatingsFromMe")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teams_LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Executor")
                        .WithMany("Tickets")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tickets_ExecutorId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_ProjectId");

                    b.Navigation("Executor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendForUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("MyRatings");

                    b.Navigation("RatingsFromMe");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
