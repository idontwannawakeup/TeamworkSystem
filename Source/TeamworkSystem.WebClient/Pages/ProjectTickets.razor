@page "/project/{ProjectId:guid}/tickets"
@inject IStringLocalizer<SharedLocalization> SharedLocalizer
@layout ContainerlessLayout
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITicketsService TicketsService

<ProjectLayout ProjectId="@ProjectId">
    <MudContainer MaxWidth="@MaxWidth.Large">
        <MudTable Class="mt-md-12 mb-12"
                  T="@TicketViewModel"
                  ServerData="@InitializeTicketsAsync"
                  @ref="@_table"
                  Hover="@true"
                  Breakpoint="@Breakpoint.Sm"
                  Elevation="0"
                  Dense="@true"
                  OnRowClick="@(OpenTicketPage)">
            <ToolBarContent>
                <MudText Typo="@Typo.h3">@SharedLocalizer["Tickets"]</MudText>
                <MudSpacer />
                <MudTextField T="@string"
                              ValueChanged="@(async title => await OnSearchAsync(title))"
                              Placeholder="@SharedLocalizer["SearchByTitle"]"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@SharedLocalizer["Title"]</MudTh>
                <MudTh>@SharedLocalizer["Type"]</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@SharedLocalizer["Title"]">@context.Title</MudTd>
                <MudTd DataLabel="@SharedLocalizer["Type"]">
                    @if (!string.IsNullOrWhiteSpace(context.Type))
                    {
                        <MudChip Color="@Color.Primary"
                                 Size="@Size.Small"
                                 Label="@true"
                                 Class="mx-0 my-3">
                            @context.Type
                        </MudChip>
                    }
                    else
                    {
                        <NoneChip />
                    }
                </MudTd>
                <MudTd>
                    <MudElement HtmlTag="div" Class="d-flex">
                        @if (_userId == context.Project.Team.LeaderId)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Class="ml-auto" Dense="@true">
                                <MudMenuItem Link="@GetSettingsLink(context.Id)">@SharedLocalizer["Edit"]</MudMenuItem>
                                <MudMenuItem OnClick="@(async () => await DeleteTicketAsync(context.Id))">
                                    @SharedLocalizer["Delete"]
                                </MudMenuItem>
                            </MudMenu>
                        }
                    </MudElement>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudFab Style="position: fixed; bottom: 20px; right: 20px;"
                Color="Color.Primary"
                Icon="@Icons.Material.Filled.Add"
                Label="@SharedLocalizer["Ticket"]"
                OnClick="@ShowTicketCreationDialog" />

    </MudContainer>
</ProjectLayout>

@code {

    [Parameter] public Guid ProjectId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> State { get; set; }

    private MudTable<TicketViewModel> _table;
    private string _searchTitle;
    private Guid _userId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
    }

    private static string GetSettingsLink(Guid ticketId) =>
        $"/ticket/{ticketId}/settings";

    private void OpenTicketPage(TableRowClickEventArgs<TicketViewModel> args) =>
        NavigationManager.NavigateTo($"/ticket/{args.Item.Id}");

    private async Task DeleteTicketAsync(Guid id)
    {
        var confirmed = await DialogService.ShowDeleteConfirmingDialog(SharedLocalizer,
            SharedLocalizer["ConfirmTicketDeleting"]) ?? false;

        if (confirmed)
        {
            await TicketsService.DeleteAsync(id);
            await _table.ReloadServerData();
        }
    }

    private void ShowTicketCreationDialog()
    {
        DialogService.ShowTicketCreationDialog(ProjectId, async () =>
        {
            await _table.ReloadServerData();
            StateHasChanged();
        }, SharedLocalizer);
    }

    private async Task<TableData<TicketViewModel>> InitializeTicketsAsync(TableState state)
    {
        var (tickets, pagination) = await TicketsService.GetWithPaginationHeaderAsync(
            new TicketsParameters()
            {
                PageNumber = state.Page + 1,
                PageSize = state.PageSize,
                ProjectId = ProjectId,
                Title = _searchTitle
            });

        return new() { Items = tickets, TotalItems = pagination.TotalEntitiesCount };
    }

    private async Task OnSearchAsync(string title)
    {
        _searchTitle = title;
        await _table.ReloadServerData();
    }

}
