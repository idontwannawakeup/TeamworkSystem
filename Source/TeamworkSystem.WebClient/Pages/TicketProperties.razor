@page "/ticket/{TicketId:guid}/settings"
@inject IStringLocalizer<SharedLocalization> SharedLocalizer
@inject ISnackbar Snackbar
@inject ITicketsService TicketsService
@inject IUsersService UsersService
@inject RequestErrorsHandler RequestErrorsHandler

@if (_ticket is not null)
{
    <EditForm Model="@_ticket" OnValidSubmit="@UpdateTicketAsync">
        <FluentValidationValidator />
        <MudContainer MaxWidth="@MaxWidth.Small">
            <MudGrid Spacing="2" Class="mt-8">

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Title"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField T="@string"
                                  @bind-Value="@_ticket.Title"
                                  For="@(() => _ticket.Title)"
                                  Variant="@Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Executor"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudAutocomplete T="@UserViewModel"
                                     HelperText="@SharedLocalizer["FindExecutortByLastName"]"
                                     Value="@_ticket.Executor"
                                     ValueChanged="@(e => (_ticket.Executor, _ticket.ExecutorId) = (e, e.Id))"
                                     SearchFunc="@InitializeMembersAsync"
                                     ToStringFunc="@(user => user?.FullName)"
                                     Immediate="@true"
                                     CoerceText="@true" />
                </MudItem>

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Type"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="@string"
                               @bind-Value="@_ticket.Type"
                               For="@(() => _ticket.Type)">
                        @foreach (var type in TicketPropertiesValues.Types)
                        {
                            <MudSelectItem Value="@type">@type</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Status"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="@string"
                               @bind-Value="@_ticket.Status"
                               For="@(() => _ticket.Status)">
                        @foreach (var status in TicketPropertiesValues.Statuses)
                        {
                            <MudSelectItem Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Priority"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="@string"
                               @bind-Value="@_ticket.Priority"
                               For="@(() => _ticket.Priority)">
                        @foreach (var priority in TicketPropertiesValues.Priorities)
                        {
                            <MudSelectItem Value="@priority">@priority</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Deadline"]</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="@_ticket.Deadline" For="@(() => _ticket.Deadline)" />
                </MudItem>

                <MudItem xs="12" Class="d-flex align-center">
                    <MudText Typo="@Typo.h6">@SharedLocalizer["Description"]</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="@string"
                                  @bind-Value="@_ticket.Description"
                                  For="@(() => _ticket.Description)"
                                  Variant="@Variant.Outlined"
                                  Lines="15" />
                </MudItem>

            </MudGrid>
            <MudElement HtmlTag="div" Class="d-flex justify-center align-center">
                <MudButton Variant="@Variant.Filled"
                           Color="@Color.Primary"
                           EndIcon="@Icons.Material.Filled.Save"
                           Class="mt-4"
                           ButtonType="@ButtonType.Submit">
                    @SharedLocalizer["SaveChanges"]
                </MudButton>
            </MudElement>
        </MudContainer>
    </EditForm>
}
else
{
    <Loader />
}

@code {

    [Parameter] public Guid TicketId { get; set; }

    private TicketViewModel _ticket;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeTicketAsync();
    }

    private async Task InitializeTicketAsync() =>
        _ticket = await TicketsService.GetByIdAsync(TicketId);

    private async Task<IEnumerable<UserViewModel>> InitializeMembersAsync(string lastName)
    {
        var members = await UsersService.GetAsync(new UsersParameters()
        {
            TeamId = _ticket.Project.Team.Id,
            LastName = lastName,
            PageSize = 50
        });

        return members;
    }

    private async Task UpdateTicketAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await TicketsService.UpdateAsync(_ticket);
            Snackbar.Add("Ticket updated", Severity.Success);
        });
    }

}
