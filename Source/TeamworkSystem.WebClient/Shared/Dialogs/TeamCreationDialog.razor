@inject IStringLocalizer<SharedLocalization> SharedLocalizer
@inject ISnackbar Snackbar
@inject ITeamsService TeamsService
@inject RequestErrorsHandler RequestErrorsHandler

<EditForm Model="@_team" OnValidSubmit="@OnValidSubmitAsync">
    <FluentValidationValidator />
    <MudDialog>
        <DialogContent>

            <MudTextField T="@string"
                          Label="@SharedLocalizer["NameAsTitle"]"
                          @bind-Value="@_team.Name"
                          For="@(() => _team.Name)" />

            <MudTextField T="@string"
                          Label="@SharedLocalizer["Specialization"]"
                          @bind-Value="@_team.Specialization"
                          For="@(() => _team.Specialization)" />

            <MudTextField T="@string"
                          Label="@SharedLocalizer["About"]"
                          @bind-Value="@_team.About"
                          For="@(() => _team.About)"
                          Lines="10" />

        </DialogContent>

        <DialogActions>
            <MudButton Color="@Color.Primary"
                       ButtonType="@ButtonType.Submit">
                @SharedLocalizer["Create"]
            </MudButton>
            <MudButton OnClick="@(_ => DialogInstance.Close())">@SharedLocalizer["Cancel"]</MudButton>
        </DialogActions>

    </MudDialog>
</EditForm>

@code {

    [Parameter] public Guid UserId { get; set; }

    [Parameter] public Func<Task> OnCreated { get; set; }

    [CascadingParameter] private MudDialogInstance DialogInstance { get; set; }

    private TeamViewModel _team;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _team = new() { LeaderId = UserId };
    }

    private async Task OnValidSubmitAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await TeamsService.CreateAsync(_team);
            DialogInstance.Close();
            Snackbar.Add("Team created", Severity.Success);
            await OnCreated?.Invoke()!;
        });
    }

}
