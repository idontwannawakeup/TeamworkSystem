// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamworkSystem.DataAccessLayer;

#nullable disable

namespace TeamworkSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(TeamworkSystemContext))]
    [Migration("20230514132925_ProjectTeamSeedingUpdate")]
    partial class ProjectTeamSeedingUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamsMembers", (string)null);

                    b.HasData(
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 9
                        },
                        new
                        {
                            MembersId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            TeamsId = 1
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 2
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 3
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 4
                        },
                        new
                        {
                            MembersId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            TeamsId = 5
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 6
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 7
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 8
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Just a simple blog from small team",
                            TeamId = 9,
                            Title = "Blog",
                            Type = "Website"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A web application for managing projects",
                            TeamId = 1,
                            Title = "Code A",
                            Type = "Web Application",
                            Url = "https://projecta.com"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A mobile application for tracking tasks",
                            TeamId = 1,
                            Title = "PartnerUp",
                            Type = "Mobile Application",
                            Url = "https://projectb.com"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A desktop application for managing finances",
                            TeamId = 2,
                            Title = "Ivy C",
                            Type = "Desktop Application",
                            Url = "https://projectc.com"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A web application for managing projects",
                            TeamId = 2,
                            Title = "ProjectTracker D",
                            Type = "Web Application",
                            Url = "https://projectd.com"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A mobile application for tracking tasks",
                            TeamId = 3,
                            Title = "TaskTracker E",
                            Type = "Mobile Application",
                            Url = "https://projecte.com"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A desktop application for managing finances",
                            TeamId = 3,
                            Title = "FinanceTracker F",
                            Type = "Desktop Application",
                            Url = "https://projectf.com"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A desktop application for managing finances",
                            TeamId = 3,
                            Title = "TaskMaster Ultra",
                            Type = "Desktop Application",
                            Url = "https://projectf.com"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A web application for effective task management",
                            TeamId = 2,
                            Title = "TaskMaster Pro",
                            Type = "Web Application",
                            Url = "https://taskmasterpro.com"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A mobile application for comprehensive health tracking",
                            TeamId = 2,
                            Title = "HealthTrack Mobile",
                            Type = "Mobile Application",
                            Url = "https://healthtrackmobile.com"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A desktop application for intuitive photo editing",
                            TeamId = 3,
                            Title = "PhotoMagic Desktop",
                            Type = "Desktop Application",
                            Url = "https://photomagicdesktop.com"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A web application for streamlined project management",
                            TeamId = 1,
                            Title = "ProjectSphere",
                            Type = "Web Application",
                            Url = "https://projectsphere.com"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A mobile application for next-gen social networking",
                            TeamId = 4,
                            Title = "Socialize Mobile",
                            Type = "Mobile Application",
                            Url = "https://socializemobile.com"
                        },
                        new
                        {
                            Id = 14,
                            Description = "A desktop application for professional video editing",
                            TeamId = 3,
                            Title = "VideoWizard Desktop",
                            Type = "Desktop Application",
                            Url = "https://videowizarddesktop.com"
                        },
                        new
                        {
                            Id = 15,
                            Description = "A web application for efficient customer relationship management",
                            TeamId = 2,
                            Title = "ClientConnect Web",
                            Type = "Web Application",
                            Url = "https://clientconnectweb.com"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A mobile application for personal finance tracking",
                            TeamId = 1,
                            Title = "FinTrack Mobile",
                            Type = "Mobile Application",
                            Url = "https://fintrackmobile.com"
                        },
                        new
                        {
                            Id = 17,
                            Description = "A desktop application for simplified music production",
                            TeamId = 4,
                            Title = "MusicMaster Desktop",
                            Type = "Desktop Application",
                            Url = "https://musicmasterdesktop.com"
                        },
                        new
                        {
                            Id = 18,
                            Description = "A web application for seamless e-commerce experience",
                            TeamId = 3,
                            Title = "E-Shop Web",
                            Type = "Web Application",
                            Url = "https://eshopweb.com"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Punctuality")
                        .HasColumnType("int");

                    b.Property<int>("Responsibility")
                        .HasColumnType("int");

                    b.Property<int>("Skills")
                        .HasColumnType("int");

                    b.Property<int>("Social")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("FromId", "ToId")
                        .HasName("AK_Ratings_FromId_ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Just a great person",
                            FromId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Punctuality = 4,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 5,
                            ToId = "61dfb9e3-1c27-424a-9963-9586ca110220"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("ntext");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Young and ambitious",
                            LeaderId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            Name = "Amigos",
                            Specialization = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Heatwave",
                            Specialization = "OblEnergo"
                        },
                        new
                        {
                            Id = 3,
                            About = "Lazy guys",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Lazy Guys",
                            Specialization = "Design"
                        },
                        new
                        {
                            Id = 4,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Champions"
                        },
                        new
                        {
                            Id = 5,
                            LeaderId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            Name = "Legends"
                        },
                        new
                        {
                            Id = 6,
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Shakedown"
                        },
                        new
                        {
                            Id = 7,
                            About = "We are the warriors",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Warriors"
                        },
                        new
                        {
                            Id = 8,
                            About = "We are the defenders",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Defenders",
                            Specialization = "Tests"
                        },
                        new
                        {
                            Id = 9,
                            About = "We are writing bugs, fear us",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Thunder",
                            Specialization = "Writing bugs"
                        },
                        new
                        {
                            Id = 10,
                            About = "We offer reliable, secure data storage and processing services over the internet",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Gale",
                            Specialization = "Cloud Computing"
                        },
                        new
                        {
                            Id = 11,
                            About = "We ensure all software runs smoothly and efficiently",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Lightning",
                            Specialization = "Testing"
                        },
                        new
                        {
                            Id = 12,
                            About = "We create intuitive and aesthetic user interfaces",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Blizzard",
                            Specialization = "UI/UX Design"
                        },
                        new
                        {
                            Id = 13,
                            About = "We build robust and scalable server-side applications",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Hurricane",
                            Specialization = "Backend Development"
                        },
                        new
                        {
                            Id = 14,
                            About = "We create interactive and responsive web pages",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Cyclone",
                            Specialization = "Frontend Development"
                        },
                        new
                        {
                            Id = 15,
                            About = "We extract insights and patterns from complex data",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Tornado",
                            Specialization = "Data Analysis"
                        },
                        new
                        {
                            Id = 16,
                            About = "We manage and organize complex databases efficiently",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Tempest",
                            Specialization = "Database Management"
                        },
                        new
                        {
                            Id = 17,
                            About = "We develop algorithms that can learn from and make decisions or predictions",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Whirlwind",
                            Specialization = "Machine Learning"
                        },
                        new
                        {
                            Id = 18,
                            About = "We protect computer systems from theft or damage to their hardware, software, or data",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Typhoon",
                            Specialization = "Cybersecurity"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 5, 14, 16, 29, 25, 398, DateTimeKind.Local).AddTicks(9350),
                            Description = "There's unknown bug. Just fix it.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "Medium",
                            ProjectId = 1,
                            Status = "Backlog",
                            Title = "Fix bug",
                            Type = "Epic"
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 5, 14, 16, 29, 25, 404, DateTimeKind.Local).AddTicks(9340),
                            Description = "There's a known bug. Just fix it.",
                            ExecutorId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            Priority = "Medium",
                            ProjectId = 2,
                            Status = "Backlog",
                            Title = "Fix a regular bug",
                            Type = "Epic"
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 5, 14, 16, 29, 25, 404, DateTimeKind.Local).AddTicks(9360),
                            Description = "There's a mess of bugs, you have to figure out how to fix them. Good Luck.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "High",
                            ProjectId = 1,
                            Status = "Chosen For Development",
                            Title = "Fix something there",
                            Type = "Bug"
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 5, 14, 16, 29, 25, 404, DateTimeKind.Local).AddTicks(9360),
                            Description = "This task involves identifying outdated software versions and updating them to the latest version to ensure optimal performance and security.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "Low",
                            ProjectId = 1,
                            Status = "In Progress",
                            Title = "Updating Software Versions",
                            Type = "Task"
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 5, 14, 16, 29, 25, 404, DateTimeKind.Local).AddTicks(9360),
                            Description = "In this task, you will diagnose and resolve network connectivity issues, including identifying faulty hardware, configuring network settings, and resolving software conflicts.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "High",
                            ProjectId = 1,
                            Status = "Chosen For Development",
                            Title = "Troubleshooting Network Connectivity Issues",
                            Type = "Task"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21ec5581-8205-4cf3-bf78-04401a17a918",
                            EmailConfirmed = false,
                            FirstName = "Esmaralda",
                            LastName = "Voigt",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAED5kIArsjAUkzUxIPbS+MN3MqrOVUkZoBdA8AgGysZ3E1OO+/Ab9z/jOvw3fZDih+A==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "e80abd58-d760-4e71-bb89-adf68a79dfb0",
                            Specialization = "Frontend",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21f917ac-09df-4f5c-8faa-41c6173db8ea",
                            EmailConfirmed = false,
                            FirstName = "Ostap",
                            LastName = "Bleier",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEJxZdW1mUOJQPR2LRyLdnixTBNxKFUgvWrk3b8WLRkjuWDMXS5d5wjdFGMZJRG7V4A==",
                            PhoneNumberConfirmed = false,
                            Profession = "Tester",
                            SecurityStamp = "5471e61f-232c-4b53-a4d5-04e5a60f2945",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "a36b02e1-81a9-47f4-89b6-d33c4f40ed5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dfcb415-5cfc-440f-a80b-766d06748795",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            LastName = "Beringer",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCj9j62OjOUHuRwwbfbWGZaCRZPOdAG0j9+vFILZ5Zks8ixbtwGfbqQqe25cKQNvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68617419-7e4f-426b-8719-af10eeaf20da",
                            Specialization = "Fullstack",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a07ee71a-691b-4a95-bde3-865294c697f5",
                            EmailConfirmed = false,
                            FirstName = "Marlyn",
                            LastName = "Hendry",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEKIm/STdmc29xlXo1w+gAwRIBbx5DH+HCnLbV2o5yIP2xvByQdln+oAszn/tlv+EvA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Artist",
                            SecurityStamp = "ebfd6fb9-77d4-4625-97c6-50ef446f2970",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "ae557ffc-2906-4913-bd26-40aa98a55570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9404c39-0529-45fa-b75a-e4d6f60d1731",
                            EmailConfirmed = false,
                            FirstName = "Vlasi",
                            LastName = "Arterberry",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEG37yDSiZREghBQYzWyaD2PqJT4RoQ/57ZvKT3g2QKEcalVtPbN0rvksjSUTtjMnyQ==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "78aa3f5d-45d3-4b88-932d-68f24a858730",
                            Specialization = "Interier",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "e5ca09a8-d3c6-4114-99a0-6b2f86ff1df2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8725ff7d-f704-444b-8b4d-ef22676da6f5",
                            EmailConfirmed = false,
                            FirstName = "Chasity",
                            LastName = "Ilbert",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAELFzFZTehOJJp5Fq37M1E3rT95IarnTWcUAfHmna+ijMR8sWqmEogdY9Xv39aWxdYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c5ce453-3a43-459a-b567-108bd502221f",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "bc0c5522-0a02-4f23-bb6a-319529716a94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68888ba2-73b2-4976-aa2f-3cd09abb76db",
                            EmailConfirmed = false,
                            FirstName = "Seraphina",
                            LastName = "Salmon",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEAi3GdTuWMS8Vx4mzSkEeeJgzZepwhABxqDhqNka2Dlgc+IPLHQFQLube5xrjnJgcA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "a43e4d85-7351-46c1-9d1b-a84630ad2c7c",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "7484e532-dc8e-4005-8b67-15ad8a421a37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1898b25-a77b-421b-827a-63a2e5f5fa5a",
                            EmailConfirmed = false,
                            FirstName = "Chas",
                            LastName = "Hope",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEKtjML7IEvvqvQ+W9xEOUaJ+6eQzeC0r3hoQbIA/d/Ml0pIyYEGpSBys1Q3vitDjfA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "12a7b05c-3ca4-4461-b265-eddef9162c5e",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0c3877d-d4c2-4225-81ff-3cbe1df95b8f",
                            EmailConfirmed = false,
                            FirstName = "Nadezhda",
                            LastName = "Haynes",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEBhSAo7NSPsIlyX6TZPNs1rr74vUdLbYNkxSicAHY8UMNWaQmgGZbbBT1I/ZJz0c8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b977e15-e5e4-45d8-9389-2f24bf23b394",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17148a6c-b7c7-4cae-9e28-824f8a823ab4",
                            EmailConfirmed = false,
                            FirstName = "Sonny",
                            LastName = "Gibb",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEKtUB/nLqNuaX61dPnsTK+zbmAtljeBWkUf9O2uhUJXNusq7n5lP32YQ47UFgZ1bAw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Tester",
                            SecurityStamp = "31907dd0-b396-4933-aeb0-3d398670d4fc",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a2c33e6-f083-4dd5-bdf7-da83337102ff",
                            EmailConfirmed = false,
                            FirstName = "Eric",
                            LastName = "Lincoln",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEOxYO/DGXK+uPIuyPbdClxuMBSiCfGr62A74h7vnG7uNDA90ouLot0MeXe2LNbAJUA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "e8294bdd-27d5-4003-a9e7-6439851663ae",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendForUsersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SecondId");

                    b.Property<string>("FriendsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstId");

                    b.HasKey("FriendForUsersId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "From")
                        .WithMany("MyRatings")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_FromId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "To")
                        .WithMany("RatingsFromMe")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teams_LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Executor")
                        .WithMany("Tickets")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tickets_ExecutorId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_ProjectId");

                    b.Navigation("Executor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendForUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("MyRatings");

                    b.Navigation("RatingsFromMe");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
