// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamworkSystem.DataAccessLayer;

#nullable disable

namespace TeamworkSystem.DataAccessLayer.Migrations
{
    [DbContext(typeof(TeamworkSystemContext))]
    [Migration("20230514134624_SeedingUpdate1")]
    partial class SeedingUpdate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<int>("TeamsId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.HasKey("MembersId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamsMembers", (string)null);

                    b.HasData(
                        new
                        {
                            MembersId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            TeamsId = 1
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 2
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 3
                        },
                        new
                        {
                            MembersId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            TeamsId = 4
                        },
                        new
                        {
                            MembersId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            TeamsId = 5
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 6
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 7
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 8
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 9
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 10
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 11
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 12
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 13
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 14
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 15
                        },
                        new
                        {
                            MembersId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            TeamsId = 16
                        },
                        new
                        {
                            MembersId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            TeamsId = 17
                        },
                        new
                        {
                            MembersId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            TeamsId = 18
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Just a simple blog from small team",
                            TeamId = 9,
                            Title = "Blog",
                            Type = "Website"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A web application for managing projects",
                            TeamId = 1,
                            Title = "Code A",
                            Type = "Web Application",
                            Url = "https://projecta.com"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A mobile application for tracking tasks",
                            TeamId = 1,
                            Title = "PartnerUp",
                            Type = "Mobile Application",
                            Url = "https://projectb.com"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A desktop application for managing finances",
                            TeamId = 2,
                            Title = "Ivy C",
                            Type = "Desktop Application",
                            Url = "https://projectc.com"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A web application for managing projects",
                            TeamId = 2,
                            Title = "ProjectTracker D",
                            Type = "Web Application",
                            Url = "https://projectd.com"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A mobile application for tracking tasks",
                            TeamId = 3,
                            Title = "TaskTracker E",
                            Type = "Mobile Application",
                            Url = "https://projecte.com"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A desktop application for managing finances",
                            TeamId = 3,
                            Title = "FinanceTracker F",
                            Type = "Desktop Application",
                            Url = "https://projectf.com"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A desktop application for managing finances",
                            TeamId = 3,
                            Title = "TaskMaster Ultra",
                            Type = "Desktop Application",
                            Url = "https://projectf.com"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A web application for effective task management",
                            TeamId = 2,
                            Title = "TaskMaster Pro",
                            Type = "Web Application",
                            Url = "https://taskmasterpro.com"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A mobile application for comprehensive health tracking",
                            TeamId = 2,
                            Title = "HealthTrack Mobile",
                            Type = "Mobile Application",
                            Url = "https://healthtrackmobile.com"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A desktop application for intuitive photo editing",
                            TeamId = 3,
                            Title = "PhotoMagic Desktop",
                            Type = "Desktop Application",
                            Url = "https://photomagicdesktop.com"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A web application for streamlined project management",
                            TeamId = 1,
                            Title = "ProjectSphere",
                            Type = "Web Application",
                            Url = "https://projectsphere.com"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A mobile application for next-gen social networking",
                            TeamId = 4,
                            Title = "Socialize Mobile",
                            Type = "Mobile Application",
                            Url = "https://socializemobile.com"
                        },
                        new
                        {
                            Id = 14,
                            Description = "A desktop application for professional video editing",
                            TeamId = 3,
                            Title = "VideoWizard Desktop",
                            Type = "Desktop Application",
                            Url = "https://videowizarddesktop.com"
                        },
                        new
                        {
                            Id = 15,
                            Description = "A web application for efficient customer relationship management",
                            TeamId = 2,
                            Title = "ClientConnect Web",
                            Type = "Web Application",
                            Url = "https://clientconnectweb.com"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A mobile application for personal finance tracking",
                            TeamId = 1,
                            Title = "FinTrack Mobile",
                            Type = "Mobile Application",
                            Url = "https://fintrackmobile.com"
                        },
                        new
                        {
                            Id = 17,
                            Description = "A desktop application for simplified music production",
                            TeamId = 4,
                            Title = "MusicMaster Desktop",
                            Type = "Desktop Application",
                            Url = "https://musicmasterdesktop.com"
                        },
                        new
                        {
                            Id = 18,
                            Description = "A web application for seamless e-commerce experience",
                            TeamId = 3,
                            Title = "E-Shop Web",
                            Type = "Web Application",
                            Url = "https://eshopweb.com"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Punctuality")
                        .HasColumnType("int");

                    b.Property<int>("Responsibility")
                        .HasColumnType("int");

                    b.Property<int>("Skills")
                        .HasColumnType("int");

                    b.Property<int>("Social")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("FromId", "ToId")
                        .HasName("AK_Ratings_FromId_ToId");

                    b.HasIndex("ToId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Just a great person",
                            FromId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Punctuality = 4,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 5,
                            ToId = "61dfb9e3-1c27-424a-9963-9586ca110220"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "She always comes prepared for meetings and offers great insights. She's a real asset to the team.",
                            FromId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Punctuality = 4,
                            Responsibility = 4,
                            Skills = 4,
                            Social = 4,
                            ToId = "3b333929-f974-444e-a8d3-68f50a0459c0"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Their problem-solving skills are impressive. If there's a difficult issue, they're usually the one who finds a solution.",
                            FromId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Punctuality = 3,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 4,
                            ToId = "61dfb9e3-1c27-424a-9963-9586ca110220"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "The way they handle stress is commendable. Even in high-pressure situations, they remain calm and focused.",
                            FromId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Punctuality = 0,
                            Responsibility = 0,
                            Skills = 0,
                            Social = 0,
                            ToId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Their creativity is a breath of fresh air. They often come up with innovative ideas that drive our projects forward.",
                            FromId = "7484e532-dc8e-4005-8b67-15ad8a421a37",
                            Punctuality = 4,
                            Responsibility = 3,
                            Skills = 2,
                            Social = 3,
                            ToId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "They're excellent at collaboration. Always open to feedback and willing to lend a helping hand when someone needs it.",
                            FromId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            Punctuality = 3,
                            Responsibility = 4,
                            Skills = 3,
                            Social = 5,
                            ToId = "bc0c5522-0a02-4f23-bb6a-319529716a94"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Their leadership skills are truly impressive. They know how to inspire the team and keep everyone motivated.",
                            FromId = "bc0c5522-0a02-4f23-bb6a-319529716a94",
                            Punctuality = 5,
                            Responsibility = 5,
                            Skills = 4,
                            Social = 2,
                            ToId = "ae557ffc-2906-4913-bd26-40aa98a55570"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Their attention to detail is remarkable. They always ensure our work is accurate and of the highest quality.",
                            FromId = "bc0c5522-0a02-4f23-bb6a-319529716a94",
                            Punctuality = 2,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 1,
                            ToId = "e5ca09a8-d3c6-4114-99a0-6b2f86ff1df2"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "They have superb communication skills. They're very effective in making sure everyone is on the same page.",
                            FromId = "ae557ffc-2906-4913-bd26-40aa98a55570",
                            Punctuality = 3,
                            Responsibility = 4,
                            Skills = 4,
                            Social = 5,
                            ToId = "e5ca09a8-d3c6-4114-99a0-6b2f86ff1df2"
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Their work ethic is inspiring. Always one of the first to arrive and the last to leave, setting a great example for the team.",
                            FromId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Punctuality = 5,
                            Responsibility = 5,
                            Skills = 5,
                            Social = 3,
                            ToId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66"
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Their positivity is contagious. They always maintain a good attitude, which really helps to boost morale in the office.",
                            FromId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Punctuality = 3,
                            Responsibility = 3,
                            Skills = 2,
                            Social = 5,
                            ToId = "7484e532-dc8e-4005-8b67-15ad8a421a37"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("ntext");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Young and ambitious",
                            LeaderId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            Name = "Amigos",
                            Specialization = "Web Development"
                        },
                        new
                        {
                            Id = 2,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Heatwave",
                            Specialization = "OblEnergo"
                        },
                        new
                        {
                            Id = 3,
                            About = "Lazy guys",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Lazy Guys",
                            Specialization = "Design"
                        },
                        new
                        {
                            Id = 4,
                            LeaderId = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            Name = "Champions"
                        },
                        new
                        {
                            Id = 5,
                            LeaderId = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            Name = "Legends"
                        },
                        new
                        {
                            Id = 6,
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Shakedown"
                        },
                        new
                        {
                            Id = 7,
                            About = "We are the warriors",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Warriors"
                        },
                        new
                        {
                            Id = 8,
                            About = "We are the defenders",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Defenders",
                            Specialization = "Tests"
                        },
                        new
                        {
                            Id = 9,
                            About = "We are writing bugs, fear us",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Thunder",
                            Specialization = "Writing bugs"
                        },
                        new
                        {
                            Id = 10,
                            About = "We offer reliable, secure data storage and processing services over the internet",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Gale",
                            Specialization = "Cloud Computing"
                        },
                        new
                        {
                            Id = 11,
                            About = "We ensure all software runs smoothly and efficiently",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Lightning",
                            Specialization = "Testing"
                        },
                        new
                        {
                            Id = 12,
                            About = "We create intuitive and aesthetic user interfaces",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Blizzard",
                            Specialization = "UI/UX Design"
                        },
                        new
                        {
                            Id = 13,
                            About = "We build robust and scalable server-side applications",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Hurricane",
                            Specialization = "Backend Development"
                        },
                        new
                        {
                            Id = 14,
                            About = "We create interactive and responsive web pages",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Cyclone",
                            Specialization = "Frontend Development"
                        },
                        new
                        {
                            Id = 15,
                            About = "We extract insights and patterns from complex data",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Tornado",
                            Specialization = "Data Analysis"
                        },
                        new
                        {
                            Id = 16,
                            About = "We manage and organize complex databases efficiently",
                            LeaderId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Name = "Tempest",
                            Specialization = "Database Management"
                        },
                        new
                        {
                            Id = 17,
                            About = "We develop algorithms that can learn from and make decisions or predictions",
                            LeaderId = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            Name = "Whirlwind",
                            Specialization = "Machine Learning"
                        },
                        new
                        {
                            Id = 18,
                            About = "We protect computer systems from theft or damage to their hardware, software, or data",
                            LeaderId = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            Name = "Typhoon",
                            Specialization = "Cybersecurity"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 5, 14, 16, 46, 23, 943, DateTimeKind.Local).AddTicks(3120),
                            Description = "There's unknown bug. Just fix it.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "Medium",
                            ProjectId = 1,
                            Status = "Backlog",
                            Title = "Fix bug",
                            Type = "Epic"
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 5, 14, 16, 46, 23, 949, DateTimeKind.Local).AddTicks(2330),
                            Description = "There's a known bug. Just fix it.",
                            ExecutorId = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            Priority = "Medium",
                            ProjectId = 2,
                            Status = "Backlog",
                            Title = "Fix a regular bug",
                            Type = "Epic"
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 5, 14, 16, 46, 23, 949, DateTimeKind.Local).AddTicks(2340),
                            Description = "There's a mess of bugs, you have to figure out how to fix them. Good Luck.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "High",
                            ProjectId = 1,
                            Status = "Chosen For Development",
                            Title = "Fix something there",
                            Type = "Bug"
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 5, 14, 16, 46, 23, 949, DateTimeKind.Local).AddTicks(2350),
                            Description = "This task involves identifying outdated software versions and updating them to the latest version to ensure optimal performance and security.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "Low",
                            ProjectId = 1,
                            Status = "In Progress",
                            Title = "Updating Software Versions",
                            Type = "Task"
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 5, 14, 16, 46, 23, 949, DateTimeKind.Local).AddTicks(2350),
                            Description = "In this task, you will diagnose and resolve network connectivity issues, including identifying faulty hardware, configuring network settings, and resolving software conflicts.",
                            ExecutorId = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            Priority = "High",
                            ProjectId = 1,
                            Status = "Chosen For Development",
                            Title = "Troubleshooting Network Connectivity Issues",
                            Type = "Task"
                        });
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3b333929-f974-444e-a8d3-68f50a0459c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "041023f1-1626-4fa8-a014-fabc9e0a4c02",
                            EmailConfirmed = false,
                            FirstName = "Esmaralda",
                            LastName = "Voigt",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGIAlY3cmz6i9K804M0Ws1QqrrwabuBfUaQMLRX+EuJifgTLYNWwmvnYpYlFrE6nWA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "566ef8a9-5f2d-4215-aeb1-61d1f7764f74",
                            Specialization = "Frontend",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "61dfb9e3-1c27-424a-9963-9586ca110220",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b29a71ef-f3b4-4a71-93ad-bd32fee4888c",
                            EmailConfirmed = false,
                            FirstName = "Ostap",
                            LastName = "Bleier",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGD8Wa6oj48QPZjOecRHdlnuTxtvOFGQZ+YxdLnh12x41cJxD85HTWqxpmRthAHTjg==",
                            PhoneNumberConfirmed = false,
                            Profession = "Tester",
                            SecurityStamp = "20497050-0aff-43d6-95ea-445fd3c37345",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "a36b02e1-81a9-47f4-89b6-d33c4f40ed5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d4f5cda-5264-4399-90f6-cf75f7c98749",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            LastName = "Beringer",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdUyi8q4dMewsrq1lkJBkKeyLpbvcVfcZauDeDXClNkMyj+NqBI6gyX+lWsVn9EnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ab7fbc7-6f1f-4e8a-a0b7-90cf80118798",
                            Specialization = "Fullstack",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "013a2014-4a25-4a3d-9fae-e0f783d42ef9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb2c1d64-d2f0-4b50-8a2f-7c01bc4b80ca",
                            EmailConfirmed = false,
                            FirstName = "Marlyn",
                            LastName = "Hendry",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEMje6K7KuAjLOkMcnPatgcNsZVAH5uhQUfuxmfMXSaOb+TTl6bGKYipqpRHZbOWpKw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Artist",
                            SecurityStamp = "51041e2a-8183-4e27-9339-d44fc5e1b248",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "ae557ffc-2906-4913-bd26-40aa98a55570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fda7a117-4598-4032-b976-d0697ef98fcd",
                            EmailConfirmed = false,
                            FirstName = "Vlasi",
                            LastName = "Arterberry",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAELrvfYBoqzv1S2+Mz79WPXCQFsmr/7xnV0OYu/SG+oK/kHj0UjcvPgROWzKIKrxYYQ==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "f78edb6f-ca11-4fa4-9c12-5c279260115c",
                            Specialization = "Interier",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = "e5ca09a8-d3c6-4114-99a0-6b2f86ff1df2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fca20fe-bd83-441b-b467-97bad5bfbb7b",
                            EmailConfirmed = false,
                            FirstName = "Chasity",
                            LastName = "Ilbert",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEJA/B6Ku85+kqiD/+045SIyku3Q0sXlXJobGt3nV3u1hPsICxT0B5YXz5Ibf+jfS1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49fe361f-1384-4ff4-a3de-379f9db8a8be",
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = "bc0c5522-0a02-4f23-bb6a-319529716a94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538b94da-7b41-4b00-a6de-ca2da9c31fdf",
                            EmailConfirmed = false,
                            FirstName = "Seraphina",
                            LastName = "Salmon",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEMnhzgeBtCk3pvOP4VB2VUAcCD6Gl9JlNdVPXFkLgBe8YRUlgCC7O2GhYsKrEYYeEQ==",
                            PhoneNumberConfirmed = false,
                            Profession = "Developer",
                            SecurityStamp = "52bf0400-29d4-4a33-8c7b-9987616a611c",
                            Specialization = "Backend",
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = "7484e532-dc8e-4005-8b67-15ad8a421a37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a8a6ec0-06e2-46be-9d98-d1a10e60c620",
                            EmailConfirmed = false,
                            FirstName = "Chas",
                            LastName = "Hope",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcCedf61dALFAbOjgRpsCxY2GvLYWccPnUXM3D/fZsrb4PmHRE4I8YpAMWsyGRv8A==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "862007ea-a0b6-4fef-9575-261c3e72acea",
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = "3f036c83-88e8-4aeb-ad33-290d60cf6b66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb33aa2c-f0e6-4f94-8347-7917cf314f88",
                            EmailConfirmed = false,
                            FirstName = "Nadezhda",
                            LastName = "Haynes",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEKguKXmZd+8InnZBckK8272gmtXkFRfMUvGoMcaoBlSxb63TzcbpfRRsqjYjSnHwnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23f52bfa-6fd8-4953-8a86-7826a5a14de1",
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = "7ad5c481-f391-45bb-a79c-cfcb1adb448b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c12bd25-1fda-46d3-8f89-f2bdc18e0caf",
                            EmailConfirmed = false,
                            FirstName = "Sonny",
                            LastName = "Gibb",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEGcOkMNCQGoWlcJXJqXweR1QrzkdhUa75xfXq/GeYRaNbFl+H6UbvMZoJgo5wQoHTw==",
                            PhoneNumberConfirmed = false,
                            Profession = "Tester",
                            SecurityStamp = "a38f4faa-c1a2-4975-b4c6-f5c4187fcb2b",
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = "0a906f06-fc52-417b-bc81-352df8bbe721",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3885d1a7-9c90-4e85-be3f-dacf2683a403",
                            EmailConfirmed = false,
                            FirstName = "Eric",
                            LastName = "Lincoln",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2KaHdr7eNoBbiF+2sG7rjQdKPGKp2FAxldfw6eIvUkWrPb5QGF+KDBto6PO3PhzA==",
                            PhoneNumberConfirmed = false,
                            Profession = "Designer",
                            SecurityStamp = "3e03f73c-d69c-4c1f-bdf7-78b1c2e4d62c",
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("FriendForUsersId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SecondId");

                    b.Property<string>("FriendsId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FirstId");

                    b.HasKey("FriendForUsersId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "From")
                        .WithMany("MyRatings")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_FromId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "To")
                        .WithMany("RatingsFromMe")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teams_LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Ticket", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", "Executor")
                        .WithMany("Tickets")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tickets_ExecutorId");

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_ProjectId");

                    b.Navigation("Executor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendForUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamworkSystem.DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Project", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.Team", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TeamworkSystem.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("MyRatings");

                    b.Navigation("RatingsFromMe");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
