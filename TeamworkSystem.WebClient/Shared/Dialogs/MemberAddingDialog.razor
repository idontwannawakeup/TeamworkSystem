@inject ISnackbar Snackbar
@inject IUsersService UsersService
@inject ITeamsService TeamsService 
@inject RequestErrorsHandler RequestErrorsHandler

<EditForm Model="@teamMember" OnValidSubmit="@OnValidSubmitAsync">
    <MudDialog>

        <DialogContent>
            <MudSelect T="@UserViewModel"
                       Label="Member"
                       Value="@teamMember.User"
                       ValueChanged="@(e => (teamMember.User, teamMember.UserId) = (e, e.Id))"
                       ToStringFunc="@(user => user?.FullName)">
                @if (users is not null)
                {
                    @foreach (var user in users)
                    {
                        <MudSelectItem T="@UserViewModel" Value="@user" />
                    }
                }
            </MudSelect>
        </DialogContent>

        <DialogActions>
            <MudButton Color="@Color.Primary" ButtonType="@ButtonType.Submit">Add</MudButton>
            <MudButton OnClick="@(e => DialogInstance.Close())">Cancel</MudButton>
        </DialogActions>

    </MudDialog>
</EditForm>

@code {

    [Parameter] public int TeamId { get; set; }

    [Parameter] public Func<Task> OnCreated { get; set; }

    [CascadingParameter] private MudDialogInstance DialogInstance { get; set; }

    private TeamMemberViewModel teamMember = new();

    private List<UserViewModel> users = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeUsersAsync();
        teamMember.TeamId = TeamId;
    }

    private async Task InitializeUsersAsync()
    {
        users = await UsersService.GetAsync() as List<UserViewModel>;
    }

    private async Task OnValidSubmitAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await TeamsService.AddMemberAsync(teamMember);
            DialogInstance.Close();
            Snackbar.Add("Member added", Severity.Success);
            OnCreated?.Invoke();
        });
    }

}
