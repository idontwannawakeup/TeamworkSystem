@inject ISnackbar Snackbar
@inject IProjectsService ProjectsService
@inject ITeamsService TeamsService
@inject RequestErrorsHandler RequestErrorsHandler

<EditForm Model="@projectModel" OnValidSubmit="@OnValidSubmitAsync">
    <MudDialog>

        <DialogContent>
            <MudTextField T="@string" Label="Title" @bind-Value="@projectModel.Title" />
            <MudSelect T="@TeamViewModel"
                       Label="Team"
                       Value="@projectModel.Team"
                       ValueChanged="@(e => (projectModel.Team, projectModel.TeamId) = (e, e.Id))"
                       ToStringFunc="@(team => team?.Name)">
                @if (teams is not null)
                {
                    @foreach (var team in teams)
                    {
                        <MudSelectItem T="@TeamViewModel" Value="@team" />
                    }
                }
            </MudSelect>
            <MudTextField T="@string" Label="Type" @bind-Value="@projectModel.Type" />
            <MudTextField T="@string" Label="Url" @bind-Value="@projectModel.Url" />
            <MudTextField T="@string" Label="Description" @bind-Value="@projectModel.Description" Lines="10" />

        </DialogContent>

        <DialogActions>
            <MudButton Color="@Color.Primary" ButtonType="@ButtonType.Submit">Create</MudButton>
            <MudButton OnClick="@(e => DialogInstance.Close())">Cancel</MudButton>
        </DialogActions>

    </MudDialog>
</EditForm>

@code {

    [Parameter] public string UserId { get; set; }

    [Parameter] public Func<Task> OnCreated { get; set; }

    [CascadingParameter] private MudDialogInstance DialogInstance { get; set; }

    private ProjectViewModel projectModel = new();

    private List<TeamViewModel> teams = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeTeamsAsync();
    }

    private async Task InitializeTeamsAsync()
    {
        teams = await TeamsService.GetTeamsForUserAsync(UserId) as List<TeamViewModel>;
    }

    private async Task OnValidSubmitAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await ProjectsService.CreateAsync(projectModel);
            DialogInstance.Close();
            Snackbar.Add("Project created", Severity.Success);
            await OnCreated?.Invoke();
        });
    }

}
