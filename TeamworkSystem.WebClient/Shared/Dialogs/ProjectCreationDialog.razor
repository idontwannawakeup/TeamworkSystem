@inject ISnackbar Snackbar
@inject IProjectsService ProjectsService
@inject ITeamsService TeamsService
@inject RequestErrorsHandler RequestErrorsHandler

<EditForm Model="@project" OnValidSubmit="@OnValidSubmitAsync">
    <FluentValidationValidator />
    <MudDialog>
        <DialogContent>

            <MudTextField T="@string"
                          Label="@nameof(project.Title)"
                          @bind-Value="@project.Title"
                          For="@(() => project.Title)" />

            <MudSelect T="@TeamViewModel"
                       Label="@nameof(project.Team)"
                       Value="@project.Team"
                       ValueChanged="@(e => (project.Team, project.TeamId) = (e, e.Id))"
                       ToStringFunc="@(team => team?.Name)"
                       For="@(() => project.Team)">
                @if (teams is not null)
                {
                    @foreach (var team in teams)
                    {
                        <MudSelectItem T="@TeamViewModel" Value="@team" />
                    }
                }
            </MudSelect>

            <MudTextField T="@string"
                          Label="@nameof(project.Type)"
                          @bind-Value="@project.Type"
                          For="@(() => project.Type)" />

            <MudTextField T="@string"
                          Label="@nameof(project.Url)"
                          @bind-Value="@project.Url"
                          For="@(() => project.Url)" />

            <MudTextField T="@string"
                          Label="@nameof(project.Description)"
                          @bind-Value="@project.Description"
                          For="@(() => project.Description)"
                          Lines="10" />

        </DialogContent>
        <DialogActions>
            <MudButton Color="@Color.Primary" ButtonType="@ButtonType.Submit">Create</MudButton>
            <MudButton OnClick="@(e => DialogInstance.Close())">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [Parameter] public string UserId { get; set; }

    [Parameter] public Func<Task> OnCreated { get; set; }

    [CascadingParameter] private MudDialogInstance DialogInstance { get; set; }

    private ProjectViewModel project = new();

    private List<TeamViewModel> teams = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeTeamsAsync();
    }

    private async Task InitializeTeamsAsync()
    {
        teams = await TeamsService.GetTeamsForUserAsync(UserId) as List<TeamViewModel>;
    }

    private async Task OnValidSubmitAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await ProjectsService.CreateAsync(project);
            DialogInstance.Close();
            Snackbar.Add("Project created", Severity.Success);
            await OnCreated?.Invoke();
        });
    }

}
