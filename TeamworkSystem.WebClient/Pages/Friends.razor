@page "/friends"
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IUsersService UsersService
@inject RequestErrorsHandler RequestErrorsHandler

<MudText Class="mt-md-12 mb-4" Typo="@Typo.h3" Align="@Align.Left">Friends</MudText>

@if (Loaded)
{
    <MudTable T="@UserViewModel"
              Items="@friends"
              Hover="@true"
              Elevation="0"
              Dense="@true"
              OnRowClick="@OpenFriendProfile"
              RowClass="cursor-pointer">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Profession</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudElement HtmlTag="div" Class="d-flex align-center">
                    <MudAvatar Color="@Color.Secondary">A</MudAvatar>
                    <MudText Typo="@Typo.subtitle1" Class="ml-4">@context.FullName</MudText>
                </MudElement>
            </MudTd>
            <MudTd DataLabel="Profession">
                @if (!string.IsNullOrWhiteSpace(context.Profession))
                {
                    @context.Profession
                }
                else
                {
                    <NoneChip />
                }
            </MudTd>
            <MudTd>
                <MudElement HtmlTag="div" Class="d-flex">
                    <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Class="ml-auto">
                        <MudMenuItem OnClick="@(async e => await DeleteFriendAsync(context.Id))">
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudElement>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <Loader />
}

<MudFab Style="position: fixed; bottom: 20px; right: 20px;"
        Color="Color.Primary"
        Icon="@Icons.Material.Filled.Add"
        Label="Friend"
        OnClick="@ShowFriendsCreationDialog" />

@code {

    [CascadingParameter] private Task<AuthenticationState> State { get; set; }

    private List<UserViewModel> friends = null;

    private string userId = null;

    private bool Loaded => friends is not null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
        await InitializeFriendsAsync();
    }

    private async Task InitializeFriendsAsync()
    {
        friends = await UsersService.GetFriendsAsync(userId) as List<UserViewModel>;
    }

    private async Task DeleteFriendAsync(string friendId)
    {
        var confirmed = await DialogService.ShowDeleteConfirmingDialog(
            "Are you sure you want to delete this friend?") ?? false;

        if (confirmed)
        {
            await RequestErrorsHandler.HandleRequestAsync(async () =>
            {
                var viewModel = new FriendsViewModel() { FirstId = userId, SecondId = friendId };
                await UsersService.DeleteFriendsAsync(viewModel);
                friends = await UsersService.GetFriendsAsync(userId) as List<UserViewModel>;
                Snackbar.Add("Friend deleted.", Severity.Success);
            });
        }
    }

    private void ShowFriendsCreationDialog()
    {
        DialogService.ShowFriendsCreationDialog(userId, async () =>
        {
            await InitializeFriendsAsync();
            StateHasChanged();
        });
    }

    private void OpenFriendProfile(TableRowClickEventArgs<UserViewModel> args) =>
        NavigationManager.NavigateTo($"/users/{args.Item.Id}/profile");

}
