@page "/project/{ProjectId:int}/tickets"
@layout ContainerlessLayout
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITicketsService TicketsService  

<ProjectLayout ProjectId="@ProjectId">
    <MudContainer MaxWidth="@MaxWidth.Large">
        <MudText Class="mt-md-12 mb-4" Typo="@Typo.h3" Align="@Align.Left">Tickets</MudText>

        @if (tickets is not null)
        {
            <MudTable T="@TicketViewModel"
                      Items="@tickets"
                      Hover="@true"
                      Elevation="0"
                      Dense="@true"
                      OnRowClick="@OnRowClick">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Type">
                        @if (!string.IsNullOrWhiteSpace(context.Type))
                        {
                            <MudChip Color="@Color.Primary"
                                     Size="@Size.Small"
                                     Label="@true"
                                     Class="mx-0 my-3">
                                @context.Type
                            </MudChip>
                        }
                        else
                        {
                            <NoneChip />
                        }
                    </MudTd>
                    <MudTd>
                        <MudElement HtmlTag="div" Class="d-flex">
                            <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Class="ml-auto" Dense="@true">
                                <MudMenuItem Link="@GetPropertiesLink(context.Id)">Edit</MudMenuItem>
                                <MudMenuItem OnClick="@(async () => await OnDeleteClickAsync(context.Id))">
                                    Delete
                                </MudMenuItem>
                            </MudMenu>
                        </MudElement>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <Loader />
        }

        <MudFab Style="position: fixed; bottom: 20px; right: 20px;"
                Color="Color.Primary"
                Icon="@Icons.Material.Filled.Add"
                Label="Ticket"
                OnClick="@ShowTicketCreationDialog" />

    </MudContainer>
</ProjectLayout>

@code {

    [Parameter] public int ProjectId { get; set; }

    private List<TicketViewModel> tickets = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeTicketsAsync();
    }

    private string GetPropertiesLink(int ticketId) =>
        $"/ticket/{ticketId}/properties";

    private void OnRowClick(TableRowClickEventArgs<TicketViewModel> args) =>
        NavigationManager.NavigateTo($"/ticket/{args.Item.Id}");

    private async Task InitializeTicketsAsync() =>
        tickets = await TicketsService.GetByProjectIdAsync(ProjectId) as List<TicketViewModel>;

    private async Task OnDeleteClickAsync(int id)
    {
        var confirmed = await DialogService.ShowDeleteConfirmingDialog(
            "Are you sure you want to delete this ticket?") ?? false;

        if (confirmed)
        {
            await TicketsService.DeleteAsync(id);
            await InitializeTicketsAsync();
        }
    }

    private void ShowTicketCreationDialog()
    {
        DialogService.ShowTicketCreationDialog(ProjectId, async () =>
        {
            await InitializeTicketsAsync();
            StateHasChanged();
        });
    }

}
