@page "/users/{UserId}/profile"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<UserProfile> L
@inject IStringLocalizer<SharedLocalization> SL
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IUsersService UsersService
@inject IRatingsService RatingsService
@inject ITeamsService TeamsService 
@inject RequestErrorsHandler RequestErrorsHandler

@if (user is not null)
{
    <MudPaper Elevation="@elevation" Class="mt-10">
        <MudGrid>
            @if (!string.IsNullOrWhiteSpace(user.Avatar))
            {
                <MudItem xs="6" md="4" Class="mx-auto mx-md-0 pa-6">
                    <MudElement HtmlTag="div"
                                Style="@($"background: url({Configuration["ApiUrl"]}/{user.Avatar}) no-repeat center; background-size: cover; width: 350px; height: 250px;")" />
                </MudItem>
            }
            <MudItem xs="12" md="8">
                <MudElement HtmlTag="div" Class="user-profile__main-information pa-6">
                    <MudElement HtmlTag="div" Class="user-profile__title">
                        <MudText Typo="@Typo.h5" Color="@Color.Dark">@user.FullName</MudText>
                        <MudText Typo="@Typo.subtitle1" Color="@Color.Surface">@user.UserName</MudText>
                        @if (!string.IsNullOrWhiteSpace(user.Profession))
                        {
                            <MudText Typo="@Typo.subtitle1" Color="@Color.Secondary">@user.Profession</MudText>
                        }
                    </MudElement>
                </MudElement>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid Spacing="4">
        <MudItem xs="12" md="4">
            <MudPaper Elevation="@elevation" Class="mt-10 pa-6">
                <MudText Typo="@Typo.h6" Style="@colorGrey">@SL["Profession"]</MudText>
                @if (!string.IsNullOrWhiteSpace(user.Profession))
                {
                    <MudText Typo="@Typo.subtitle2">@user.Profession</MudText>
                }
                else
                {
                    <NoneChip />
                }
                <MudDivider Class="mt-2 mb-4" />
                <MudText Typo="@Typo.h6" Style="@colorGrey">@SL["Specialization"]</MudText>
                @if (!string.IsNullOrWhiteSpace(user.Specialization))
                {
                    <MudText Typo="@Typo.subtitle2">@user.Specialization</MudText>
                }
                else
                {
                    <NoneChip />
                }
                <MudDivider Class="mt-2 mb-4" />
                <MudText Typo="@Typo.h6" Style="@colorGrey">@SL["Email"]</MudText>
                @if (!string.IsNullOrWhiteSpace(user.Email))
                {
                    <MudText Typo="@Typo.subtitle2">@user.Email</MudText>
                }
                else
                {
                    <NoneChip />
                }
                <MudDivider Class="mt-2 mb-4" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="8">
            <MudTabs Elevation="@elevation"
                     ApplyEffectsToContainer="@true"
                     Rounded="@true"
                     Class="mt-10">

                <MudTabPanel Text="@SL["Teams"]">
                    <MudElement HtmlTag="div" Class="pa-6">
                        @if (teams is not null && teams.Count != 0)
                        {
                            <MudList Clickable="@true">
                                @foreach (var team in teams)
                                {
                                    <MudListItem OnClick="@(e => OpenTeamPage(team))">
                                        <MudElement HtmlTag="div" Class="d-flex justify-space-between align-center">
                                            <MudElement HtmlTag="div" Class="d-flex align-center gap-3">
                                                <MudAvatar Image="@(team.Avatar is not null ? $"{Configuration["ApiUrl"]}/{team.Avatar}" : null)"
                                                           Color="@Color.Success">
                                                    A
                                                </MudAvatar>
                                                <MudElement HtmlTag="div" Class="d-flex flex-column">
                                                    <MudText Typo="@Typo.subtitle2">@team.Name</MudText>
                                                    @if (!string.IsNullOrWhiteSpace(team.Specialization))
                                                    {
                                                        <MudText Typo="@Typo.caption" Style="@colorGrey">@team.Specialization</MudText>
                                                    }
                                                </MudElement>
                                            </MudElement>
                                            <MudElement HtmlTag="div" Class="d-flex align-center gap-3">
                                                <MudAvatar Image="@(team.Leader?.Avatar is not null ? $"{Configuration["ApiUrl"]}/{team.Leader.Avatar}" : null)"
                                                           Color="@Color.Secondary"
                                                           Size="@Size.Small">
                                                    A
                                                </MudAvatar>
                                                <span>@team.Leader.FullName</span>
                                            </MudElement>
                                        </MudElement>
                                    </MudListItem>
                                    <MudDivider Class="mb-4" />
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText Typo="@Typo.h6">@L["NoTeams"]</MudText>
                        }
                    </MudElement>
                </MudTabPanel>

                <MudTabPanel Text="@SL["Ratings"]">
                    <MudElement HtmlTag="div" Class="pa-6">
                        @if (ratings is not null && ratings.Count != 0)
                        {
                            <MudList Clickable="@true">
                                @foreach (var rating in ratings)
                                {
                                    <MudListItem OnClick="@(e => OpenFullRating(rating))">
                                        <MudElement HtmlTag="div"
                                                    Class="d-flex flex-column flex-sm-row justify-space-between gap-2">
                                            <MudElement HtmlTag="div"
                                                        Class="rating-item__author d-flex align-center gap-4">
                                                <MudAvatar Image="@(rating.From?.Avatar is not null ? $"{Configuration["ApiUrl"]}/{rating.From.Avatar}" : null)"
                                                           Color="@Color.Secondary">
                                                    A
                                                </MudAvatar>
                                                <MudText Typo="@Typo.subtitle1">@rating.From.FullName</MudText>
                                            </MudElement>
                                            <MudElement HtmlTag="div"
                                                        Class="rating-item__average d-flex flex-column align-center gap-1">
                                                <MudText Typo="@Typo.subtitle2">Average: @rating.Average</MudText>
                                                <MudRating SelectedValue="@((int) rating.Average)" ReadOnly="@true" />
                                            </MudElement>
                                        </MudElement>
                                    </MudListItem>
                                    <MudDivider Class="mb-4" />
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText Typo="@Typo.h6">@L["NoRatings"]</MudText>
                        }
                    </MudElement>
                </MudTabPanel>

                <MudTabPanel Text="@SL["LeaveRate"]">
                    <EditForm Model="@ratingFromVisitedUser" OnValidSubmit="@LeaveRatingAsync">
                        <FluentValidationValidator />
                        <MudElement HtmlTag="div" Class="pa-6">
                            <MudText Typo="@Typo.h5">@L["RateThisUser"]</MudText>

                            <MudElement HtmlTag="div" Class="user-profile__rating mt-4">
                                <MudText Typo="@Typo.h6" Style="@colorGrey">
                                    @SL["Social"]
                                </MudText>
                                <MudRating @bind-SelectedValue="@ratingFromVisitedUser.Social" />
                                <MudDivider Class="mt-2 mb-4" />
                            </MudElement>

                            <MudElement HtmlTag="div" Class="user-profile__rating mt-4">
                                <MudText Typo="@Typo.h6" Style="@colorGrey">
                                    @SL["Skills"]
                                </MudText>
                                <MudRating @bind-SelectedValue="@ratingFromVisitedUser.Skills" />
                                <MudDivider Class="mt-2 mb-4" />
                            </MudElement>

                            <MudElement HtmlTag="div" Class="user-profile__rating mt-4">
                                <MudText Typo="@Typo.h6" Style="@colorGrey">
                                    @SL["Responsibility"]
                                </MudText>
                                <MudRating @bind-SelectedValue="@ratingFromVisitedUser.Responsibility" />
                                <MudDivider Class="mt-2 mb-4" />
                            </MudElement>

                            <MudElement HtmlTag="div" Class="user-profile__rating mt-4">
                                <MudText Typo="@Typo.h6" Style="@colorGrey">
                                    @SL["Punctuality"]
                                </MudText>
                                <MudRating @bind-SelectedValue="@ratingFromVisitedUser.Punctuality" />
                                <MudDivider Class="mt-2 mb-4" />
                            </MudElement>

                            <MudTextField T="@string"
                                          Label="@SL["Comment"]"
                                          @bind-Value="@ratingFromVisitedUser.Comment"
                                          For="@(() => ratingFromVisitedUser.Comment)"
                                          HelperText="Write your thoughts on this person!"
                                          Lines="4" />

                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>

                            <MudButton FullWidth="@true"
                                       EndIcon="@Icons.Material.Filled.Send"
                                       Class="mt-4"
                                       ButtonType="@ButtonType.Submit"
                                       Disabled="@addRatingButtonDisabled">
                                @SL["Save"]
                            </MudButton>

                        </MudElement>
                    </EditForm>
                </MudTabPanel>

            </MudTabs>
        </MudItem>
    </MudGrid>
}
else
{
    <Loader />
}

@code {

    [Parameter] public string UserId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    private UserViewModel user = null;

    private RatingViewModel ratingFromVisitedUser = null;

    private List<RatingViewModel> ratings = null;

    private List<TeamViewModel> teams = null;

    private readonly string colorGrey = $"color: {Colors.Grey.Default};";

    private readonly int elevation = 4;

    private bool addRatingButtonDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var visitedUserId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
        await InitializeUserAsync();
        ratingFromVisitedUser = new() { FromId = visitedUserId, ToId = user.Id };
        await InitializeRatingsAsync();
        await InitializeTeamsAsync();
    }

    private async Task InitializeUserAsync() =>
        user = await UsersService.GetByIdAsync(UserId);

    private async Task InitializeRatingsAsync() =>
        ratings = await RatingsService.GetByRatedUserId(UserId) as List<RatingViewModel>;

    private async Task InitializeTeamsAsync() =>
        teams = await TeamsService.GetTeamsForUserAsync(UserId) as List<TeamViewModel>;

    private void OpenTeamPage(TeamViewModel team) =>
        NavigationManager.NavigateTo($"/team/{team.Id}");

    private void OpenFullRating(RatingViewModel rating) =>
        DialogService.ShowRatingDialog(rating.Id, SL);

    private async Task LeaveRatingAsync()
    {
        await RequestErrorsHandler.HandleRequestAsync(async () =>
        {
            await RatingsService.CreateAsync(ratingFromVisitedUser);
            Snackbar.Add("Rating added", Severity.Success);
            addRatingButtonDisabled = true;
            await InitializeRatingsAsync();
        });
    }

}
