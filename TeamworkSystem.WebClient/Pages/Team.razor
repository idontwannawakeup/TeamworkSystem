@page "/team/{TeamId:int}"
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject ISnackbar Snackbar 
@inject IDialogService DialogService  
@inject ITeamsService TeamsService
@inject IProjectsService ProjectsService
@inject IUsersService UsersService
@inject RequestErrorsHandler RequestErrorsHandler

<MudGrid Spacing="3" Class="mt-8">

    <MudItem xs="12" md="3" Class="d-flex flex-column gap-4">

        <MudPaper Elevation="4" Class="d-flex flex-column align-start gap-2 pa-4">
            @if (team is not null)
            {
                <MudText Typo="@Typo.h6">@team.Name</MudText>
                <MudText Typo="@Typo.subtitle1">@team.Specialization</MudText>
                @if (userId == team.LeaderId)
                {
                    <MudButton Variant="@Variant.Outlined"
                               Color="@Color.Tertiary"
                               EndIcon="@Icons.Material.Filled.Add"
                               IconColor="@Color.Inherit"
                               OnClick="@ShowMemberAddingDialog">
                        Add member
                    </MudButton>
                    <MudButton Variant="@Variant.Outlined"
                               Color="@Color.Info"
                               EndIcon="@Icons.Material.Filled.Edit"
                               IconColor="@Color.Inherit"
                               Link="@EditLink">
                        Edit
                    </MudButton>
                }
            }
            else
            {
                <MudSkeleton />
                <MudSkeleton />
                <MudSkeleton />
            }
        </MudPaper>

        <MudPaper Elevation="4" Class="pa-4">
            @if (members is not null)
            {
                <MudText Typo="@Typo.h6" Class="py-1">Members</MudText>
                <MudText Typo="@Typo.subtitle1"
                         Style="@colorGrey"
                         Class="pb-1">
                    Total count: @members.Count
                </MudText>
                <MudDivider Class="my-2" />
                @if (members.Count != 0)
                {
                    <MudList Clickable="@true">
                        @foreach (var member in members)
                        {
                            <MudListItem OnClick="@(e => OpenMemberProfile(member))">
                                <MudElement HtmlTag="div" Class="d-flex align-center gap-3">

                                    <MudAvatar Image="@(member.Avatar is not null ? $"{Configuration["ApiUrl"]}/{member.Avatar}" : null)"
                                               Color="@Color.Secondary">
                                        A
                                    </MudAvatar>

                                    <MudElement HtmlTag="div" Class="d-flex flex-column">
                                        <MudText Typo="@Typo.subtitle2">@member.FullName</MudText>
                                        <MudText Typo="@Typo.caption" Style="@colorGrey">@member.Profession</MudText>
                                    </MudElement>

                                    @if (userId == team?.LeaderId)
                                    {
                                        <MudMenu Class="ml-auto"
                                                 Icon="@Icons.Material.Filled.MoreHoriz"
                                                 Dense="@true"
                                                 OffsetX="true"
                                                 Direction="@Direction.Left">
                                            <MudMenuItem OnClick="@(async e => await DeleteMemberAsync(member))">
                                                Remove
                                            </MudMenuItem>
                                        </MudMenu>
                                    }

                                </MudElement>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Typo="@Typo.subtitle1">This team has no members.</MudText>
                }
            }
            else
            {
                <Loader />
            }
        </MudPaper>

    </MudItem>

    <MudItem xs="12" md="9">
        <MudTable T="@ProjectViewModel"
                  ServerData="@InitializeProjectsAsync"
                  @ref="@projectsTable"
                  Hover="@true"
                  Breakpoint="@Breakpoint.Sm"
                  Elevation="4"
                  OnRowClick="@OpenProjectPage"
                  RowClass="cursor-pointer">
            <ToolBarContent>
                <MudText Typo="@Typo.h4">Projects</MudText>
                <MudToolBarSpacer />
                <MudTextField T="@string"
                              ValueChanged="@(async title => await OnSearchAsync(title))"
                              Placeholder="Search by title"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Title</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Url</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Type">
                    @if (context.Type is not null)
                    {
                        @context.Type
                    }
                    else
                    {
                        <NoneChip />
                    }
                </MudTd>
                <MudTd DataLabel="Url">
                    @if (!string.IsNullOrWhiteSpace(context.Url))
                    {
                        @context.Url
                    }
                    else
                    {
                        <NoneChip />
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>

</MudGrid>

@code {

    [Parameter] public int TeamId { get; set; }

    [CascadingParameter] private Task<AuthenticationState> State { get; set; }

    private string EditLink => $"/team/{TeamId}/settings";

    private MudTable<ProjectViewModel> projectsTable;

    private string searchTitle;

    private TeamViewModel team = null;

    private List<UserViewModel> members = null;

    private string userId = null;

    private string colorGrey = $"color: {Colors.Grey.Default};";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
        await InitializeTeamAsync();
        await InitializeMembersAsync();
    }

    private void OpenProjectPage(TableRowClickEventArgs<ProjectViewModel> args) =>
        NavigationManager.NavigateTo($"/project/{args.Item.Id}/overview");

    private async Task InitializeTeamAsync() =>
        team = await TeamsService.GetByIdAsync(TeamId);

    private async Task InitializeMembersAsync() =>
        members = await UsersService.GetByTeamIdAsync(TeamId) as List<UserViewModel>;

    private async Task DeleteMemberAsync(UserViewModel user)
    {
        var confirmed = await DialogService.ShowDeleteConfirmingDialog(
            "Are you sure you want to remove this member?") ?? false;

        if (confirmed)
        {
            await RequestErrorsHandler.HandleRequestAsync(async () =>
            {
                await TeamsService.DeleteMemberAsync(new() { TeamId = team.Id, UserId = user.Id });
                Snackbar.Add("Member deleted", Severity.Success);
                await InitializeMembersAsync();
            });
        }
    }

    private void ShowMemberAddingDialog()
    {
        DialogService.ShowMemberAddingDialog(TeamId, async () =>
        {
            await InitializeMembersAsync();
            StateHasChanged();
        });
    }

    private void OpenMemberProfile(UserViewModel member)
    {
        if (userId == member.Id)
        {
            NavigationManager.NavigateTo($"/profile");
            return;
        }

        NavigationManager.NavigateTo($"/users/{member.Id}/profile");
    }

    private async Task<TableData<ProjectViewModel>> InitializeProjectsAsync(TableState state)
    {
        var (projects, pagination) = await ProjectsService.GetWithPaginationHeaderAsync(
            new ProjectsParameters()
            {
                PageNumber = state.Page + 1,
                PageSize = state.PageSize,
                TeamId = TeamId,
                Title = searchTitle
            });

        return new() { Items = projects, TotalItems = pagination.TotalEntitiesCount };
    }

    private async Task OnSearchAsync(string title)
    {
        searchTitle = title;
        await projectsTable.ReloadServerData();
    }

}
