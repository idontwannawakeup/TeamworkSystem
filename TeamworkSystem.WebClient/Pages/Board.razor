@page "/project/{ProjectId:guid}/board"
@layout ContainerlessLayout
@inject IStringLocalizer<Board> Localizer
@inject ITicketsService TicketsService

<ProjectLayout ProjectId="@ProjectId">
    <MudContainer MaxWidth="@MaxWidth.ExtraLarge">
        <MudText Class="mt-3 mt-md-8 mb-4" Typo="@Typo.h4">@Localizer["KanbanBoard"]</MudText>
        @if (_tickets is not null)
        {
            <MudGrid Spacing="3">

                <MudItem xs="12" md="6" lg="3">
                    <MudPaper Elevation="3" Class="pa-5">
                        <MudText Typo="@Typo.h5" Class="py-1">@Localizer["Backlog"]</MudText>
                        <MudDivider Class="mb-4" />

                        <MudElement HtmlTag="div" Class="d-flex flex-column gap-4">
                            @foreach (var ticket in _tickets["Backlog"])
                            {
                                <TicketCard Ticket="@ticket" />
                            }
                        </MudElement>

                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="6" lg="3">
                    <MudPaper Elevation="3" Class="pa-5">
                        <MudText Typo="@Typo.h5" Class="py-1">@Localizer["ChosenForDevelopment"]</MudText>
                        <MudDivider Class="mb-4" />

                        <MudElement HtmlTag="div" Class="d-flex flex-column gap-4">
                            @foreach (var ticket in _tickets["Chosen For Development"])
                            {
                                <TicketCard Ticket="@ticket" />
                            }
                        </MudElement>

                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="6" lg="3">
                    <MudPaper Elevation="3" Class="pa-5">
                        <MudText Typo="@Typo.h5" Class="py-1">@Localizer["InProgress"]</MudText>
                        <MudDivider Class="mb-4" />

                        <MudElement HtmlTag="div" Class="d-flex flex-column gap-4">
                            @foreach (var ticket in _tickets["In Progress"])
                            {
                                <TicketCard Ticket="@ticket" />
                            }
                        </MudElement>

                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="6" lg="3">
                    <MudPaper Elevation="3" Class="pa-5">
                        <MudText Typo="@Typo.h5" Class="py-1">@Localizer["Done"]</MudText>
                        <MudDivider Class="mb-4" />

                        <MudElement HtmlTag="div" Class="d-flex flex-column gap-4">
                            @foreach (var ticket in _tickets["Done"])
                            {
                                <TicketCard Ticket="@ticket" />
                            }
                        </MudElement>

                    </MudPaper>
                </MudItem>

            </MudGrid>
        }
    </MudContainer>
</ProjectLayout>

@code {

    [Parameter] public Guid ProjectId { get; set; }

    private Dictionary<string, IEnumerable<TicketViewModel>> _tickets;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeTicketsAsync();
    }

    private async Task InitializeTicketsAsync() =>
        _tickets = new()
        {
            {
                "Backlog",
                await TicketsService.GetAsync(new()
                {
                    ProjectId = ProjectId,
                    Status = "Backlog",
                    PageSize = 50
                })
            },
            {
                "Chosen For Development",
                await TicketsService.GetAsync(new()
                {
                    ProjectId = ProjectId,
                    Status = "Chosen For Development",
                    PageSize = 50
                })
            },
            {
                "In Progress",
                await TicketsService.GetAsync(new()
                {
                    ProjectId = ProjectId,
                    Status = "In Progress",
                    PageSize = 50
                })
            },
            {
                "Done",
                await TicketsService.GetAsync(new()
                {
                    ProjectId = ProjectId,
                    Status = "Done",
                    PageSize = 50
                })
            }
        };

}
