@page "/projects"
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IDialogService DialogService 
@inject IProjectsService ProjectsService

<MudTable Class="mt-md-12 mb-12"
          T="@ProjectViewModel"
          ServerData="@InitializeProjectsAsync"
          @ref="@table"
          Hover="@true"
          Breakpoint="@Breakpoint.Sm"
          Elevation="0"
          OnRowClick="@OpenProjectPage"
          RowClass="cursor-pointer"
          Dense="@true">
    <ToolBarContent>
        <MudText Typo="@Typo.h3">Projects</MudText>
        <MudToolBarSpacer />
        <MudTextField T="@string"
                      ValueChanged="@(async title => await OnSearchAsync(title))"
                      Placeholder="Search by title"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Team</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Profession">
            @if (context.Type is not null)
            {
                @context.Type
            }
            else
            {
                <NoneChip />
            }
        </MudTd>
        <MudTd DataLabel="Team">
            <MudElement HtmlTag="div" Class="d-flex align-center">
                <MudAvatar Image="@(context.Team?.Avatar is not null ? $"{Configuration["ApiUrl"]}/{context.Team.Avatar}" : null)"
                           Color="@Color.Success">
                    A
                </MudAvatar>
                <MudText Typo="@Typo.subtitle1" Class="ml-4">@context.Team.Name</MudText>
            </MudElement>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudFab Style="position: fixed; bottom: 20px; right: 20px;"
        Color="Color.Primary"
        Icon="@Icons.Material.Filled.Add"
        Label="Project"
        OnClick="@ShowProjectCreationDialog" />

@code {

    [CascadingParameter] private Task<AuthenticationState> State { get; set; }

    private MudTable<ProjectViewModel> table;

    private string userId = null;

    private string searchTitle = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
    }

    private void OpenProjectPage(TableRowClickEventArgs<ProjectViewModel> args) =>
        NavigationManager.NavigateTo($"/project/{args.Item.Id}/overview");

    private void ShowProjectCreationDialog()
    {
        DialogService.ShowProjectCreationDialog(userId, async () =>
        {
            await table.ReloadServerData();
            StateHasChanged();
        });
    }

    private async Task<TableData<ProjectViewModel>> InitializeProjectsAsync(TableState state)
    {
        var (projects, pagination) = await ProjectsService.GetWithPaginationHeaderAsync(
            new ProjectsParameters()
            {
                PageNumber = state.Page + 1,
                PageSize = state.PageSize,
                TeamMemberId = userId,
                Title = searchTitle
            });

        return new() { Items = projects, TotalItems = pagination.TotalEntitiesCount };
    }

    private async Task OnSearchAsync(string title)
    {
        searchTitle = title;
        await table.ReloadServerData();
    }

}
