@page "/projects"
@inject IDialogService DialogService 
@inject NavigationManager NavigationManager
@inject IProjectsService ProjectsService

<MudText Class="mt-md-12 mb-4" Typo="@Typo.h3" Align="@Align.Left">Projects</MudText>

@if (Loaded)
{
    <MudTable T="@ProjectViewModel"
              Items="@projects"
              Hover="@true"
              Elevation="0"
              Dense="@true"
              OnRowClick="@OnRowClick">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Team</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudElement HtmlTag="div" Class="d-flex align-center">
                    <MudAvatar Size="@Size.Small" Color="@Color.Secondary">A</MudAvatar>
                    <MudText Typo="@Typo.subtitle1" Class="ml-4">@context.Title</MudText>
                </MudElement>
            </MudTd>
            <MudTd DataLabel="Profession">@context.Type</MudTd>
            <MudTd DataLabel="Team">
                <MudElement HtmlTag="div" Class="d-flex align-center">
                    <MudAvatar Size="@Size.Small" Color="@Color.Secondary">A</MudAvatar>
                    <MudText Typo="@Typo.subtitle1" Class="ml-4">@context.Team.Name</MudText>
                </MudElement>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <Loader />
}

<MudFab Style="position: fixed; bottom: 20px; right: 20px;"
        Color="Color.Primary"
        Icon="@Icons.Material.Filled.Add"
        Label="Project"
        OnClick="@ShowProjectCreationDialog" />

@code {

    [CascadingParameter] private Task<AuthenticationState> State { get; set; }

    private List<ProjectViewModel> projects = null;

    private bool Loaded => projects is not null;

    private void OnRowClick(TableRowClickEventArgs<ProjectViewModel> args) =>
        NavigationManager.NavigateTo($"/project/{args.Item.Id}/overview");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeProjectsAsync();
    }

    private async Task InitializeProjectsAsync()
    {
        var userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
        projects = await ProjectsService.GetProjectsForTeamMemberAsync(userId) as List<ProjectViewModel>;
    }

    private async Task ShowProjectCreationDialog()
    {
        var userId = await ApiAuthenticationStateProvider.GetUserIdFromStateAsync(State);
        DialogService.ShowProjectCreationDialog(userId, async () =>
        {
            await InitializeProjectsAsync();
            StateHasChanged();
        });
    }

}
