@page "/home"
@inject IStringLocalizer<Home> Localizer
@inject IStringLocalizer<SharedLocalization> SharedLocalizer
@inject IUsersService UsersService

@if (_user is not null)
{
    <MudText Class="mt-md-12" Typo="@Typo.h3" Align="@Align.Center">
        @Localizer["Greeting"], @_user.FullName!
    </MudText>
}
else
{
    <MudText Class="mt-md-12" Typo="@Typo.h3" Align="@Align.Center">
        @Localizer["Greeting"]!
    </MudText>
}

<MudText Class="mt-2 mb-6" Style="@_subtitleStyle" Typo="@Typo.h5" Align="@Align.Center">
    @Localizer["Welcome"]
</MudText>

<MudGrid Spacing="4">
    <MudItem xs="12" sm="6" md="3">
        <MudCard Class="d-flex flex-column" Style="height: 100%">
            <MudCardMedia Height="200"
                          Image="assets/home/teams.png" />
            <MudCardContent>
                <MudText Typo="@Typo.body1">@Localizer["TeamsHint"]</MudText>
            </MudCardContent>
            <MudCardActions Class="mt-auto">
                <MudButton Link="/teams"
                           Variant="@Variant.Text"
                           Color="@Color.Primary">
                    @SharedLocalizer["Teams"]
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Class="d-flex flex-column" Style="height: 100%">
            <MudCardMedia Height="200"
                          Image="assets/home/projects.png" />
            <MudCardContent>
                <MudText Typo="@Typo.body1">@Localizer["ProjectsHint"]</MudText>
            </MudCardContent>
            <MudCardActions Class="mt-auto">
                <MudButton Link="/projects"
                           Variant="@Variant.Text"
                           Color="@Color.Primary">
                    @SharedLocalizer["Projects"]
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Class="d-flex flex-column" Style="height: 100%">
            <MudCardMedia Height="200"
                          Image="assets/home/tickets.jpg" />
            <MudCardContent>
                <MudText Typo="@Typo.body1">@Localizer["TicketsHint"]</MudText>
            </MudCardContent>
            <MudCardActions Class="mt-auto">
                <MudButton Link="/tickets"
                           Variant="@Variant.Text"
                           Color="@Color.Primary">
                    @SharedLocalizer["Tickets"]
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudCard Class="d-flex flex-column" Style="height: 100%">
            <MudCardMedia Height="200"
                          Image="assets/home/friends.png" />
            <MudCardContent>
                <MudText Typo="@Typo.body1">@Localizer["FriendsHint"]</MudText>
            </MudCardContent>
            <MudCardActions Class="mt-auto">
                <MudButton Link="/friends"
                           Variant="@Variant.Text"
                           Color="@Color.Primary">
                    @SharedLocalizer["Friends"]
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter] private Task<AuthenticationState> StateAsync { get; set; }

    private UserViewModel _user;

    private string _subtitleStyle = $"color: {Colors.Grey.Default};";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var state = await StateAsync;
        if (state.User.Identity is { IsAuthenticated: true })
        {
            Guid userId = new(state.User.Claims.First(claim => claim.Type == ClaimTypes.Authentication).Value);
            _user = await UsersService.GetByIdAsync(userId);
        }
    }

}
