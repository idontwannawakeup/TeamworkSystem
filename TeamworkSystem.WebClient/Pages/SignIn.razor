@page "/signIn"
@layout EmptyLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService

<MudContainer Class="pb-8" MaxWidth="@MaxWidth.Small">
    <EditForm Model="@userModel" OnValidSubmit="@OnValidSubmit">
        <MudCard Elevation="4" Class="px-sm-4 px-md-12 px-lg-16 py-sm-4 py-md-6 py-lg-8 mt-4 mt-md-8 mt-lg-16 mx-auto">
            <MudCardContent>
                <MudText Class="mb-xs-4 mb-sm-8 mb-md-16" Typo="@Typo.h4" Align="@Align.Center">Please sign in</MudText>
                <MudTextField T="@string"
                              Class="my-4"
                              Label="@nameof(userModel.UserName)"
                              Variant="Variant.Outlined"
                              @bind-Value="@userModel.UserName" />
                <MudTextField T="@string"
                              Class="my-4"
                              Label="@nameof(userModel.Password)"
                              Variant="@Variant.Outlined"
                              @bind-Value="@userModel.Password"
                              InputType="@passwordType"
                              Adornment="@Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              OnAdornmentClick="@(e => ChangePasswordIcon())" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="mx-auto mt-8 py-2 px-12"
                           Size="@Size.Large"
                           Color="@Color.Primary"
                           Variant="@Variant.Filled"
                           ButtonType="@ButtonType.Submit">
                    Sign In
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

@code {

    private readonly string showIcon = Icons.Material.Filled.VisibilityOff;

    private readonly string hideIcon = Icons.Material.Filled.Visibility;

    private bool passwordShow = false;

    private InputType passwordType = InputType.Password;

    private string passwordIcon = Icons.Material.Filled.Visibility;

    private void ChangePasswordIcon()
    {
        (passwordType, passwordIcon) = passwordShow
            ? (InputType.Password, hideIcon)
            : (InputType.Text, showIcon);

        passwordShow = !passwordShow;
    }

    private UserSignInViewModel userModel = new();

    private async Task OnValidSubmit()
    {
        try
        {
            var token = await IdentityService.SignInAsync(userModel);
            NavigationManager.NavigateTo($"/home");
            Snackbar.Add("You logged in succesfull!", Severity.Success);
        }
        catch (ValidationException e)
        {
            foreach (var (key, errors) in e.Errors)
            {
                Snackbar.Add($"{key} - {string.Join(", ", errors)}", Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}
